// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clientmsg_gen.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_NoError           ResultCode = 0
	ResultCode_AgentNotFound     ResultCode = 101
	ResultCode_AgentAddressError ResultCode = 102
	ResultCode_GameNotFound      ResultCode = 103
)

var ResultCode_name = map[int32]string{
	0:   "NoError",
	101: "AgentNotFound",
	102: "AgentAddressError",
	103: "GameNotFound",
}

var ResultCode_value = map[string]int32{
	"NoError":           0,
	"AgentNotFound":     101,
	"AgentAddressError": 102,
	"GameNotFound":      103,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{0}
}

type ServerInfo struct {
	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{0}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ServerInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PingACK struct {
}

func (m *PingACK) Reset()         { *m = PingACK{} }
func (m *PingACK) String() string { return proto.CompactTextString(m) }
func (*PingACK) ProtoMessage()    {}
func (*PingACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{1}
}
func (m *PingACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingACK.Merge(m, src)
}
func (m *PingACK) XXX_Size() int {
	return m.Size()
}
func (m *PingACK) XXX_DiscardUnknown() {
	xxx_messageInfo_PingACK.DiscardUnknown(m)
}

var xxx_messageInfo_PingACK proto.InternalMessageInfo

type LoginREQ struct {
	Version  string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Platform string `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	UID      string `protobuf:"bytes,3,opt,name=UID,proto3" json:"UID,omitempty"`
}

func (m *LoginREQ) Reset()         { *m = LoginREQ{} }
func (m *LoginREQ) String() string { return proto.CompactTextString(m) }
func (*LoginREQ) ProtoMessage()    {}
func (*LoginREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{2}
}
func (m *LoginREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginREQ.Merge(m, src)
}
func (m *LoginREQ) XXX_Size() int {
	return m.Size()
}
func (m *LoginREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginREQ.DiscardUnknown(m)
}

var xxx_messageInfo_LoginREQ proto.InternalMessageInfo

func (m *LoginREQ) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LoginREQ) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *LoginREQ) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

type LoginACK struct {
	Result    ResultCode  `protobuf:"varint,1,opt,name=Result,proto3,enum=proto.ResultCode" json:"Result,omitempty"`
	Server    *ServerInfo `protobuf:"bytes,2,opt,name=Server,proto3" json:"Server,omitempty"`
	GameToken string      `protobuf:"bytes,3,opt,name=GameToken,proto3" json:"GameToken,omitempty"`
	GameSvcID string      `protobuf:"bytes,4,opt,name=GameSvcID,proto3" json:"GameSvcID,omitempty"`
}

func (m *LoginACK) Reset()         { *m = LoginACK{} }
func (m *LoginACK) String() string { return proto.CompactTextString(m) }
func (*LoginACK) ProtoMessage()    {}
func (*LoginACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{3}
}
func (m *LoginACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginACK.Merge(m, src)
}
func (m *LoginACK) XXX_Size() int {
	return m.Size()
}
func (m *LoginACK) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginACK.DiscardUnknown(m)
}

var xxx_messageInfo_LoginACK proto.InternalMessageInfo

func (m *LoginACK) GetResult() ResultCode {
	if m != nil {
		return m.Result
	}
	return ResultCode_NoError
}

func (m *LoginACK) GetServer() *ServerInfo {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *LoginACK) GetGameToken() string {
	if m != nil {
		return m.GameToken
	}
	return ""
}

func (m *LoginACK) GetGameSvcID() string {
	if m != nil {
		return m.GameSvcID
	}
	return ""
}

type VerifyREQ struct {
	GameToken string `protobuf:"bytes,1,opt,name=GameToken,proto3" json:"GameToken,omitempty"`
	GameSvcID string `protobuf:"bytes,2,opt,name=GameSvcID,proto3" json:"GameSvcID,omitempty"`
}

func (m *VerifyREQ) Reset()         { *m = VerifyREQ{} }
func (m *VerifyREQ) String() string { return proto.CompactTextString(m) }
func (*VerifyREQ) ProtoMessage()    {}
func (*VerifyREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{4}
}
func (m *VerifyREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyREQ.Merge(m, src)
}
func (m *VerifyREQ) XXX_Size() int {
	return m.Size()
}
func (m *VerifyREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyREQ.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyREQ proto.InternalMessageInfo

func (m *VerifyREQ) GetGameToken() string {
	if m != nil {
		return m.GameToken
	}
	return ""
}

func (m *VerifyREQ) GetGameSvcID() string {
	if m != nil {
		return m.GameSvcID
	}
	return ""
}

type VerifyACK struct {
	Result ResultCode `protobuf:"varint,1,opt,name=Result,proto3,enum=proto.ResultCode" json:"Result,omitempty"`
}

func (m *VerifyACK) Reset()         { *m = VerifyACK{} }
func (m *VerifyACK) String() string { return proto.CompactTextString(m) }
func (*VerifyACK) ProtoMessage()    {}
func (*VerifyACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{5}
}
func (m *VerifyACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyACK.Merge(m, src)
}
func (m *VerifyACK) XXX_Size() int {
	return m.Size()
}
func (m *VerifyACK) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyACK.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyACK proto.InternalMessageInfo

func (m *VerifyACK) GetResult() ResultCode {
	if m != nil {
		return m.Result
	}
	return ResultCode_NoError
}

type ChatREQ struct {
	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *ChatREQ) Reset()         { *m = ChatREQ{} }
func (m *ChatREQ) String() string { return proto.CompactTextString(m) }
func (*ChatREQ) ProtoMessage()    {}
func (*ChatREQ) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{6}
}
func (m *ChatREQ) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatREQ) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatREQ.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatREQ) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatREQ.Merge(m, src)
}
func (m *ChatREQ) XXX_Size() int {
	return m.Size()
}
func (m *ChatREQ) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatREQ.DiscardUnknown(m)
}

var xxx_messageInfo_ChatREQ proto.InternalMessageInfo

func (m *ChatREQ) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ChatACK struct {
	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *ChatACK) Reset()         { *m = ChatACK{} }
func (m *ChatACK) String() string { return proto.CompactTextString(m) }
func (*ChatACK) ProtoMessage()    {}
func (*ChatACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{7}
}
func (m *ChatACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatACK.Merge(m, src)
}
func (m *ChatACK) XXX_Size() int {
	return m.Size()
}
func (m *ChatACK) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatACK.DiscardUnknown(m)
}

var xxx_messageInfo_ChatACK proto.InternalMessageInfo

func (m *ChatACK) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TestACK struct {
	Dummy string `protobuf:"bytes,1,opt,name=Dummy,proto3" json:"Dummy,omitempty"`
}

func (m *TestACK) Reset()         { *m = TestACK{} }
func (m *TestACK) String() string { return proto.CompactTextString(m) }
func (*TestACK) ProtoMessage()    {}
func (*TestACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_54458e0ca6367313, []int{8}
}
func (m *TestACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestACK.Merge(m, src)
}
func (m *TestACK) XXX_Size() int {
	return m.Size()
}
func (m *TestACK) XXX_DiscardUnknown() {
	xxx_messageInfo_TestACK.DiscardUnknown(m)
}

var xxx_messageInfo_TestACK proto.InternalMessageInfo

func (m *TestACK) GetDummy() string {
	if m != nil {
		return m.Dummy
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterType((*ServerInfo)(nil), "proto.ServerInfo")
	proto.RegisterType((*PingACK)(nil), "proto.PingACK")
	proto.RegisterType((*LoginREQ)(nil), "proto.LoginREQ")
	proto.RegisterType((*LoginACK)(nil), "proto.LoginACK")
	proto.RegisterType((*VerifyREQ)(nil), "proto.VerifyREQ")
	proto.RegisterType((*VerifyACK)(nil), "proto.VerifyACK")
	proto.RegisterType((*ChatREQ)(nil), "proto.ChatREQ")
	proto.RegisterType((*ChatACK)(nil), "proto.ChatACK")
	proto.RegisterType((*TestACK)(nil), "proto.TestACK")
}

func init() { proto.RegisterFile("clientmsg_gen.proto", fileDescriptor_54458e0ca6367313) }

var fileDescriptor_54458e0ca6367313 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xdf, 0xaa, 0xd3, 0x30,
	0x1c, 0xc7, 0x9b, 0x9e, 0xb3, 0xd3, 0xd3, 0xdf, 0xd1, 0x43, 0x17, 0x15, 0x8a, 0x48, 0x1d, 0xf5,
	0x66, 0x7a, 0x31, 0x44, 0xc1, 0xfb, 0xda, 0xcd, 0x51, 0x26, 0xa3, 0x66, 0x7f, 0x6e, 0x65, 0xae,
	0x69, 0x2d, 0xae, 0x89, 0xa4, 0xd9, 0x60, 0x6f, 0xe1, 0x03, 0xf8, 0x40, 0x5e, 0xee, 0xd2, 0x4b,
	0xd9, 0x5e, 0x44, 0x9a, 0xa6, 0x2b, 0x0a, 0x0a, 0xe7, 0xaa, 0xf9, 0x7d, 0xf3, 0xe9, 0x27, 0xf9,
	0x06, 0x1e, 0xac, 0x37, 0x39, 0x65, 0xb2, 0x28, 0xb3, 0x8f, 0x19, 0x65, 0x83, 0xaf, 0x82, 0x4b,
	0x8e, 0x3b, 0xea, 0xe3, 0xbf, 0x04, 0x98, 0x51, 0xb1, 0xa3, 0x22, 0x62, 0x29, 0xc7, 0xb7, 0x60,
	0x46, 0xb1, 0x8b, 0x7a, 0xa8, 0x6f, 0x13, 0x33, 0x8a, 0x31, 0x86, 0xcb, 0x98, 0x0b, 0xe9, 0x9a,
	0x3d, 0xd4, 0xef, 0x10, 0xb5, 0xf6, 0x6d, 0xb0, 0xe2, 0x9c, 0x65, 0x41, 0x38, 0xf1, 0x09, 0x5c,
	0xbf, 0xe7, 0x59, 0xce, 0xc8, 0xe8, 0x03, 0x76, 0xc1, 0x5a, 0x52, 0x51, 0xe6, 0x9c, 0xe9, 0xff,
	0x9b, 0x11, 0x3f, 0x86, 0xeb, 0x78, 0xb3, 0x92, 0x29, 0x17, 0x85, 0x12, 0xd9, 0xe4, 0x3c, 0x63,
	0x07, 0x2e, 0x16, 0xd1, 0xd0, 0xbd, 0x50, 0x71, 0xb5, 0xf4, 0xbf, 0x23, 0x2d, 0x0d, 0xc2, 0x09,
	0x7e, 0x0e, 0x57, 0x84, 0x96, 0xdb, 0x8d, 0x54, 0xce, 0xdb, 0x57, 0xdd, 0xfa, 0xf2, 0x83, 0x3a,
	0x0c, 0x79, 0x42, 0x89, 0x06, 0x2a, 0xb4, 0x2e, 0xa2, 0xce, 0xb8, 0x39, 0xa3, 0x6d, 0x3b, 0xa2,
	0x01, 0xfc, 0x04, 0xec, 0xf1, 0xaa, 0xa0, 0x73, 0xfe, 0x85, 0x32, 0x7d, 0x74, 0x1b, 0x34, 0xbb,
	0xb3, 0xdd, 0x3a, 0x1a, 0xba, 0x97, 0xed, 0xae, 0x0a, 0xfc, 0x31, 0xd8, 0x4b, 0x2a, 0xf2, 0x74,
	0x5f, 0x75, 0xfe, 0x43, 0x84, 0xfe, 0x2b, 0x32, 0xff, 0x16, 0xbd, 0x69, 0x44, 0x77, 0xeb, 0xe9,
	0x3f, 0x03, 0x2b, 0xfc, 0xbc, 0x92, 0xfa, 0xc9, 0x43, 0xce, 0x24, 0x65, 0xb2, 0x79, 0x72, 0x3d,
	0x36, 0x50, 0xa5, 0xfe, 0x37, 0xf4, 0x14, 0xac, 0x39, 0x2d, 0x15, 0xf4, 0x10, 0x3a, 0xc3, 0x6d,
	0x51, 0xec, 0x35, 0x52, 0x0f, 0x2f, 0x16, 0x00, 0xed, 0x05, 0xf0, 0x0d, 0x58, 0x53, 0x3e, 0x12,
	0x82, 0x0b, 0xc7, 0xc0, 0x5d, 0xb8, 0x1f, 0x64, 0x94, 0xc9, 0x29, 0x97, 0xef, 0xf8, 0x96, 0x25,
	0x0e, 0xc5, 0x8f, 0xa0, 0xab, 0xa2, 0x20, 0x49, 0x04, 0x2d, 0xcb, 0x9a, 0x4c, 0xb1, 0x03, 0xf7,
	0xaa, 0xd2, 0x67, 0x30, 0x7b, 0xeb, 0xfe, 0x38, 0x7a, 0xe8, 0x70, 0xf4, 0xd0, 0xaf, 0xa3, 0x87,
	0xbe, 0x9d, 0x3c, 0xe3, 0x70, 0xf2, 0x8c, 0x9f, 0x27, 0xcf, 0xf8, 0x74, 0xa5, 0x5a, 0xbf, 0xfe,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x5b, 0x8b, 0xe5, 0xb1, 0x02, 0x00, 0x00,
}

func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IP) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *PingACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LoginREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginREQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.UID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.UID)))
		i += copy(dAtA[i:], m.UID)
	}
	return i, nil
}

func (m *LoginACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Result))
	}
	if m.Server != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Server.Size()))
		n1, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GameToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.GameToken)))
		i += copy(dAtA[i:], m.GameToken)
	}
	if len(m.GameSvcID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.GameSvcID)))
		i += copy(dAtA[i:], m.GameSvcID)
	}
	return i, nil
}

func (m *VerifyREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyREQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.GameToken)))
		i += copy(dAtA[i:], m.GameToken)
	}
	if len(m.GameSvcID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.GameSvcID)))
		i += copy(dAtA[i:], m.GameSvcID)
	}
	return i, nil
}

func (m *VerifyACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ChatREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatREQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *ChatACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *TestACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dummy) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Dummy)))
		i += copy(dAtA[i:], m.Dummy)
	}
	return i, nil
}

func encodeVarintClientmsgGen(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovClientmsgGen(uint64(m.Port))
	}
	return n
}

func (m *PingACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LoginREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *LoginACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovClientmsgGen(uint64(m.Result))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.GameToken)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.GameSvcID)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *VerifyREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameToken)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.GameSvcID)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *VerifyACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovClientmsgGen(uint64(m.Result))
	}
	return n
}

func (m *ChatREQ) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *ChatACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *TestACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dummy)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func sovClientmsgGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClientmsgGen(x uint64) (n int) {
	return sovClientmsgGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &ServerInfo{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvcID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSvcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameSvcID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dummy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dummy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientmsgGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientmsgGen
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthClientmsgGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClientmsgGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClientmsgGen(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthClientmsgGen
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClientmsgGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientmsgGen   = fmt.Errorf("proto: integer overflow")
)
